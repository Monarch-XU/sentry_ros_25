// Generated by gencpp from file robot_msgs/sc_rc_msg.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_SC_RC_MSG_H
#define ROBOT_MSGS_MESSAGE_SC_RC_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct sc_rc_msg_
{
  typedef sc_rc_msg_<ContainerAllocator> Type;

  sc_rc_msg_()
    : ch()
    , s()  {
      ch.assign(0);

      s.assign(0);
  }
  sc_rc_msg_(const ContainerAllocator& _alloc)
    : ch()
    , s()  {
  (void)_alloc;
      ch.assign(0);

      s.assign(0);
  }



   typedef boost::array<int16_t, 5>  _ch_type;
  _ch_type ch;

   typedef boost::array<uint8_t, 2>  _s_type;
  _s_type s;





  typedef boost::shared_ptr< ::robot_msgs::sc_rc_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::sc_rc_msg_<ContainerAllocator> const> ConstPtr;

}; // struct sc_rc_msg_

typedef ::robot_msgs::sc_rc_msg_<std::allocator<void> > sc_rc_msg;

typedef boost::shared_ptr< ::robot_msgs::sc_rc_msg > sc_rc_msgPtr;
typedef boost::shared_ptr< ::robot_msgs::sc_rc_msg const> sc_rc_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::sc_rc_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::sc_rc_msg_<ContainerAllocator1> & lhs, const ::robot_msgs::sc_rc_msg_<ContainerAllocator2> & rhs)
{
  return lhs.ch == rhs.ch &&
    lhs.s == rhs.s;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::sc_rc_msg_<ContainerAllocator1> & lhs, const ::robot_msgs::sc_rc_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::sc_rc_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::sc_rc_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::sc_rc_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2a467194eacd1b5bdb24ba083e21b2c";
  }

  static const char* value(const ::robot_msgs::sc_rc_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2a467194eacd1b5ULL;
  static const uint64_t static_value2 = 0xbdb24ba083e21b2cULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/sc_rc_msg";
  }

  static const char* value(const ::robot_msgs::sc_rc_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[5] ch\n"
"char[2] s\n"
;
  }

  static const char* value(const ::robot_msgs::sc_rc_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ch);
      stream.next(m.s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sc_rc_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::sc_rc_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::sc_rc_msg_<ContainerAllocator>& v)
  {
    s << indent << "ch[]" << std::endl;
    for (size_t i = 0; i < v.ch.size(); ++i)
    {
      s << indent << "  ch[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ch[i]);
    }
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.s[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_SC_RC_MSG_H
