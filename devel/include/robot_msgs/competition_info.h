// Generated by gencpp from file robot_msgs/competition_info.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_COMPETITION_INFO_H
#define ROBOT_MSGS_MESSAGE_COMPETITION_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct competition_info_
{
  typedef competition_info_<ContainerAllocator> Type;

  competition_info_()
    : game_state(0)
    , our_outpost_hp(0)
    , enemy_outpost_hp(0)
    , remain_bullet(0)
    , enemy_sentry_hp(0)
    , our_sentry_hp(0)
    , our_base_hp(0)
    , first_blood(0)
    , target_position_x(0.0)
    , target_position_y(0.0)
    , is_target_active(0)  {
    }
  competition_info_(const ContainerAllocator& _alloc)
    : game_state(0)
    , our_outpost_hp(0)
    , enemy_outpost_hp(0)
    , remain_bullet(0)
    , enemy_sentry_hp(0)
    , our_sentry_hp(0)
    , our_base_hp(0)
    , first_blood(0)
    , target_position_x(0.0)
    , target_position_y(0.0)
    , is_target_active(0)  {
  (void)_alloc;
    }



   typedef uint8_t _game_state_type;
  _game_state_type game_state;

   typedef uint16_t _our_outpost_hp_type;
  _our_outpost_hp_type our_outpost_hp;

   typedef uint16_t _enemy_outpost_hp_type;
  _enemy_outpost_hp_type enemy_outpost_hp;

   typedef uint16_t _remain_bullet_type;
  _remain_bullet_type remain_bullet;

   typedef uint16_t _enemy_sentry_hp_type;
  _enemy_sentry_hp_type enemy_sentry_hp;

   typedef uint16_t _our_sentry_hp_type;
  _our_sentry_hp_type our_sentry_hp;

   typedef uint16_t _our_base_hp_type;
  _our_base_hp_type our_base_hp;

   typedef uint8_t _first_blood_type;
  _first_blood_type first_blood;

   typedef float _target_position_x_type;
  _target_position_x_type target_position_x;

   typedef float _target_position_y_type;
  _target_position_y_type target_position_y;

   typedef int8_t _is_target_active_type;
  _is_target_active_type is_target_active;





  typedef boost::shared_ptr< ::robot_msgs::competition_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::competition_info_<ContainerAllocator> const> ConstPtr;

}; // struct competition_info_

typedef ::robot_msgs::competition_info_<std::allocator<void> > competition_info;

typedef boost::shared_ptr< ::robot_msgs::competition_info > competition_infoPtr;
typedef boost::shared_ptr< ::robot_msgs::competition_info const> competition_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::competition_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::competition_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::competition_info_<ContainerAllocator1> & lhs, const ::robot_msgs::competition_info_<ContainerAllocator2> & rhs)
{
  return lhs.game_state == rhs.game_state &&
    lhs.our_outpost_hp == rhs.our_outpost_hp &&
    lhs.enemy_outpost_hp == rhs.enemy_outpost_hp &&
    lhs.remain_bullet == rhs.remain_bullet &&
    lhs.enemy_sentry_hp == rhs.enemy_sentry_hp &&
    lhs.our_sentry_hp == rhs.our_sentry_hp &&
    lhs.our_base_hp == rhs.our_base_hp &&
    lhs.first_blood == rhs.first_blood &&
    lhs.target_position_x == rhs.target_position_x &&
    lhs.target_position_y == rhs.target_position_y &&
    lhs.is_target_active == rhs.is_target_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::competition_info_<ContainerAllocator1> & lhs, const ::robot_msgs::competition_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::competition_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::competition_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::competition_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::competition_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::competition_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::competition_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::competition_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0126e094b04a5313899b587ef4b04645";
  }

  static const char* value(const ::robot_msgs::competition_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0126e094b04a5313ULL;
  static const uint64_t static_value2 = 0x899b587ef4b04645ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::competition_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/competition_info";
  }

  static const char* value(const ::robot_msgs::competition_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::competition_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 game_state\n"
"uint16 our_outpost_hp\n"
"uint16 enemy_outpost_hp\n"
"uint16 remain_bullet\n"
"uint16 enemy_sentry_hp\n"
"uint16 our_sentry_hp\n"
"uint16 our_base_hp\n"
"uint8 first_blood\n"
"float32 target_position_x\n"
"float32 target_position_y\n"
"int8 is_target_active\n"
;
  }

  static const char* value(const ::robot_msgs::competition_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::competition_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.game_state);
      stream.next(m.our_outpost_hp);
      stream.next(m.enemy_outpost_hp);
      stream.next(m.remain_bullet);
      stream.next(m.enemy_sentry_hp);
      stream.next(m.our_sentry_hp);
      stream.next(m.our_base_hp);
      stream.next(m.first_blood);
      stream.next(m.target_position_x);
      stream.next(m.target_position_y);
      stream.next(m.is_target_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct competition_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::competition_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::competition_info_<ContainerAllocator>& v)
  {
    s << indent << "game_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.game_state);
    s << indent << "our_outpost_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.our_outpost_hp);
    s << indent << "enemy_outpost_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.enemy_outpost_hp);
    s << indent << "remain_bullet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remain_bullet);
    s << indent << "enemy_sentry_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.enemy_sentry_hp);
    s << indent << "our_sentry_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.our_sentry_hp);
    s << indent << "our_base_hp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.our_base_hp);
    s << indent << "first_blood: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_blood);
    s << indent << "target_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.target_position_x);
    s << indent << "target_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.target_position_y);
    s << indent << "is_target_active: ";
    Printer<int8_t>::stream(s, indent + "  ", v.is_target_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_COMPETITION_INFO_H
