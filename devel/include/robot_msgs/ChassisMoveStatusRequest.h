// Generated by gencpp from file robot_msgs/ChassisMoveStatusRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_CHASSISMOVESTATUSREQUEST_H
#define ROBOT_MSGS_MESSAGE_CHASSISMOVESTATUSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct ChassisMoveStatusRequest_
{
  typedef ChassisMoveStatusRequest_<ContainerAllocator> Type;

  ChassisMoveStatusRequest_()
    : planner_state(0)
    , speed_x_adjust(0.0)
    , speed_y_adjust(0.0)  {
    }
  ChassisMoveStatusRequest_(const ContainerAllocator& _alloc)
    : planner_state(0)
    , speed_x_adjust(0.0)
    , speed_y_adjust(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _planner_state_type;
  _planner_state_type planner_state;

   typedef float _speed_x_adjust_type;
  _speed_x_adjust_type speed_x_adjust;

   typedef float _speed_y_adjust_type;
  _speed_y_adjust_type speed_y_adjust;





  typedef boost::shared_ptr< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisMoveStatusRequest_

typedef ::robot_msgs::ChassisMoveStatusRequest_<std::allocator<void> > ChassisMoveStatusRequest;

typedef boost::shared_ptr< ::robot_msgs::ChassisMoveStatusRequest > ChassisMoveStatusRequestPtr;
typedef boost::shared_ptr< ::robot_msgs::ChassisMoveStatusRequest const> ChassisMoveStatusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.planner_state == rhs.planner_state &&
    lhs.speed_x_adjust == rhs.speed_x_adjust &&
    lhs.speed_y_adjust == rhs.speed_y_adjust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0e6cb55e32b703b4709929c0381d7b9a";
  }

  static const char* value(const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0e6cb55e32b703b4ULL;
  static const uint64_t static_value2 = 0x709929c0381d7b9aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/ChassisMoveStatusRequest";
  }

  static const char* value(const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 客户端请求时设置状态\n"
"int32 planner_state\n"
"float32 speed_x_adjust\n"
"float32 speed_y_adjust\n"
;
  }

  static const char* value(const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planner_state);
      stream.next(m.speed_x_adjust);
      stream.next(m.speed_y_adjust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisMoveStatusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::ChassisMoveStatusRequest_<ContainerAllocator>& v)
  {
    s << indent << "planner_state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.planner_state);
    s << indent << "speed_x_adjust: ";
    Printer<float>::stream(s, indent + "  ", v.speed_x_adjust);
    s << indent << "speed_y_adjust: ";
    Printer<float>::stream(s, indent + "  ", v.speed_y_adjust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_CHASSISMOVESTATUSREQUEST_H
