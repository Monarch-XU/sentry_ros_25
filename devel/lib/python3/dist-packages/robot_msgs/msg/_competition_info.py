# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/competition_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class competition_info(genpy.Message):
  _md5sum = "0126e094b04a5313899b587ef4b04645"
  _type = "robot_msgs/competition_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 game_state
uint16 our_outpost_hp
uint16 enemy_outpost_hp
uint16 remain_bullet
uint16 enemy_sentry_hp
uint16 our_sentry_hp
uint16 our_base_hp
uint8 first_blood
float32 target_position_x
float32 target_position_y
int8 is_target_active"""
  __slots__ = ['game_state','our_outpost_hp','enemy_outpost_hp','remain_bullet','enemy_sentry_hp','our_sentry_hp','our_base_hp','first_blood','target_position_x','target_position_y','is_target_active']
  _slot_types = ['uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint8','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       game_state,our_outpost_hp,enemy_outpost_hp,remain_bullet,enemy_sentry_hp,our_sentry_hp,our_base_hp,first_blood,target_position_x,target_position_y,is_target_active

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(competition_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.game_state is None:
        self.game_state = 0
      if self.our_outpost_hp is None:
        self.our_outpost_hp = 0
      if self.enemy_outpost_hp is None:
        self.enemy_outpost_hp = 0
      if self.remain_bullet is None:
        self.remain_bullet = 0
      if self.enemy_sentry_hp is None:
        self.enemy_sentry_hp = 0
      if self.our_sentry_hp is None:
        self.our_sentry_hp = 0
      if self.our_base_hp is None:
        self.our_base_hp = 0
      if self.first_blood is None:
        self.first_blood = 0
      if self.target_position_x is None:
        self.target_position_x = 0.
      if self.target_position_y is None:
        self.target_position_y = 0.
      if self.is_target_active is None:
        self.is_target_active = 0
    else:
      self.game_state = 0
      self.our_outpost_hp = 0
      self.enemy_outpost_hp = 0
      self.remain_bullet = 0
      self.enemy_sentry_hp = 0
      self.our_sentry_hp = 0
      self.our_base_hp = 0
      self.first_blood = 0
      self.target_position_x = 0.
      self.target_position_y = 0.
      self.is_target_active = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B6HB2fb().pack(_x.game_state, _x.our_outpost_hp, _x.enemy_outpost_hp, _x.remain_bullet, _x.enemy_sentry_hp, _x.our_sentry_hp, _x.our_base_hp, _x.first_blood, _x.target_position_x, _x.target_position_y, _x.is_target_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.game_state, _x.our_outpost_hp, _x.enemy_outpost_hp, _x.remain_bullet, _x.enemy_sentry_hp, _x.our_sentry_hp, _x.our_base_hp, _x.first_blood, _x.target_position_x, _x.target_position_y, _x.is_target_active,) = _get_struct_B6HB2fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B6HB2fb().pack(_x.game_state, _x.our_outpost_hp, _x.enemy_outpost_hp, _x.remain_bullet, _x.enemy_sentry_hp, _x.our_sentry_hp, _x.our_base_hp, _x.first_blood, _x.target_position_x, _x.target_position_y, _x.is_target_active))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.game_state, _x.our_outpost_hp, _x.enemy_outpost_hp, _x.remain_bullet, _x.enemy_sentry_hp, _x.our_sentry_hp, _x.our_base_hp, _x.first_blood, _x.target_position_x, _x.target_position_y, _x.is_target_active,) = _get_struct_B6HB2fb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6HB2fb = None
def _get_struct_B6HB2fb():
    global _struct_B6HB2fb
    if _struct_B6HB2fb is None:
        _struct_B6HB2fb = struct.Struct("<B6HB2fb")
    return _struct_B6HB2fb
