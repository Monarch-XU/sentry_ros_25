// Generated by gencpp from file robot_msgs/chassis.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_CHASSIS_H
#define ROBOT_MSGS_MESSAGE_CHASSIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct chassis_
{
  typedef chassis_<ContainerAllocator> Type;

  chassis_()
    : num(0)
    , id()
    , grade()
    , yaw()
    , x()
    , y()
    , z()  {
    }
  chassis_(const ContainerAllocator& _alloc)
    : num(0)
    , id(_alloc)
    , grade(_alloc)
    , yaw(_alloc)
    , x(_alloc)
    , y(_alloc)
    , z(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _num_type;
  _num_type num;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _id_type;
  _id_type id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _grade_type;
  _grade_type grade;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _yaw_type;
  _yaw_type yaw;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_type;
  _x_type x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_type;
  _y_type y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _z_type;
  _z_type z;





  typedef boost::shared_ptr< ::robot_msgs::chassis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::chassis_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_

typedef ::robot_msgs::chassis_<std::allocator<void> > chassis;

typedef boost::shared_ptr< ::robot_msgs::chassis > chassisPtr;
typedef boost::shared_ptr< ::robot_msgs::chassis const> chassisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::chassis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::chassis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::chassis_<ContainerAllocator1> & lhs, const ::robot_msgs::chassis_<ContainerAllocator2> & rhs)
{
  return lhs.num == rhs.num &&
    lhs.id == rhs.id &&
    lhs.grade == rhs.grade &&
    lhs.yaw == rhs.yaw &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::chassis_<ContainerAllocator1> & lhs, const ::robot_msgs::chassis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::chassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::chassis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::chassis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::chassis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::chassis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::chassis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46fb889fe7931e25e4f6c75cb36330e9";
  }

  static const char* value(const ::robot_msgs::chassis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46fb889fe7931e25ULL;
  static const uint64_t static_value2 = 0xe4f6c75cb36330e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/chassis";
  }

  static const char* value(const ::robot_msgs::chassis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 num\n"
"int8[] id\n"
"int32[] grade\n"
"float32[] yaw\n"
"float32[] x\n"
"float32[] y\n"
"float32[] z\n"
;
  }

  static const char* value(const ::robot_msgs::chassis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::chassis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.id);
      stream.next(m.grade);
      stream.next(m.yaw);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::chassis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::chassis_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "grade[]" << std::endl;
    for (size_t i = 0; i < v.grade.size(); ++i)
    {
      s << indent << "  grade[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.grade[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_CHASSIS_H
