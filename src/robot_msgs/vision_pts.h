// Generated by gencpp from file robot_msgs/vision_pts.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_VISION_PTS_H
#define ROBOT_MSGS_MESSAGE_VISION_PTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/PointStamped.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct vision_pts_
{
  typedef vision_pts_<ContainerAllocator> Type;

  vision_pts_()
    : pt_aim()
    , pt_aim_pre()
    , pt_aim_singer()  {
    }
  vision_pts_(const ContainerAllocator& _alloc)
    : pt_aim(_alloc)
    , pt_aim_pre(_alloc)
    , pt_aim_singer(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _pt_aim_type;
  _pt_aim_type pt_aim;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _pt_aim_pre_type;
  _pt_aim_pre_type pt_aim_pre;

   typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _pt_aim_singer_type;
  _pt_aim_singer_type pt_aim_singer;





  typedef boost::shared_ptr< ::robot_msgs::vision_pts_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::vision_pts_<ContainerAllocator> const> ConstPtr;

}; // struct vision_pts_

typedef ::robot_msgs::vision_pts_<std::allocator<void> > vision_pts;

typedef boost::shared_ptr< ::robot_msgs::vision_pts > vision_ptsPtr;
typedef boost::shared_ptr< ::robot_msgs::vision_pts const> vision_ptsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::vision_pts_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::vision_pts_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::vision_pts_<ContainerAllocator1> & lhs, const ::robot_msgs::vision_pts_<ContainerAllocator2> & rhs)
{
  return lhs.pt_aim == rhs.pt_aim &&
    lhs.pt_aim_pre == rhs.pt_aim_pre &&
    lhs.pt_aim_singer == rhs.pt_aim_singer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::vision_pts_<ContainerAllocator1> & lhs, const ::robot_msgs::vision_pts_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::vision_pts_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::vision_pts_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::vision_pts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::vision_pts_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::vision_pts_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::vision_pts_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::vision_pts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cfc695e5e3fdca83b932ff430c0270c";
  }

  static const char* value(const ::robot_msgs::vision_pts_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cfc695e5e3fdca8ULL;
  static const uint64_t static_value2 = 0x3b932ff430c0270cULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::vision_pts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/vision_pts";
  }

  static const char* value(const ::robot_msgs::vision_pts_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::vision_pts_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PointStamped pt_aim\n"
"geometry_msgs/PointStamped pt_aim_pre\n"
"geometry_msgs/PointStamped pt_aim_singer\n"
"================================================================================\n"
"MSG: geometry_msgs/PointStamped\n"
"# This represents a Point with reference coordinate frame and timestamp\n"
"Header header\n"
"Point point\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robot_msgs::vision_pts_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::vision_pts_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pt_aim);
      stream.next(m.pt_aim_pre);
      stream.next(m.pt_aim_singer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vision_pts_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::vision_pts_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::vision_pts_<ContainerAllocator>& v)
  {
    s << indent << "pt_aim: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pt_aim);
    s << indent << "pt_aim_pre: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pt_aim_pre);
    s << indent << "pt_aim_singer: ";
    s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pt_aim_singer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_VISION_PTS_H
